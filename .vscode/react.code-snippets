{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	//  "scope": "javascript,typescript",
	//  "prefix": "log",
	//  "body": [
	//      "console.log('$1');",
	//      "$2"
	//  ],
	//  "description": "Log output to console"
	// }
	"Separator": {
		"scope": "javascript, typescript, javascriptreact, typescriptreact",
		"prefix": "sep",
		"body": [
			"/*****************************************************************************/"
		]
	},
	"React Component": {
		"prefix": "reactc",
		"description": "React component",
		"scope": "javascript, typescript, javascriptreact, typescriptreact",
		"body": [
			"import React from \"react\";",
			"",
			"type Props = React.PropsWithChildren<{}>;",
			"",
			"const $1 = ({ children }: Props) => {",
			"\treturn <div>{children}</div>;",
			"};",
			"",
			"export { $1 };",
			""
		]
	},
	"Styled React Component": {
		"prefix": "styledc",
		"description": "React component with Styled component",
		"scope": "javascript, typescript, javascriptreact, typescriptreact",
		"body": [
			"import React from \"react\";",
			"import styled from \"styled-components\";",
			"",
			"type Props = React.PropsWithChildren<{}>;",
			"",
			"const $1 = ({ children }: Props) => {",
			"\treturn <Styles>{children}</Styles>;",
			"};",
			"",
			"export { $1 };",
			"",
			"const Styles = styled.div`",
			"\tdisplay: block;",
			"`;",
			""
		]
	},
	"Store": {
		"prefix": "state",
		"description": "A Store state",
		"scope": "",
		"body": [
			"import { BaseState, Action } from \"@andrew-r-king/react-kitchen\";",
			"",
			"class $1State extends BaseState {",
			"\tvalue: number = 0;",
			"",
			"\t@Action",
			"\tchangeValue = (inValue: number) => {",
			"\t\tthis.value = inValue;",
			"\t};",
			"}",
			"",
			"export { $1State };",
			""
		]
	},
	"Responsiveness": {
		"prefix": "resp",
		"description": "Add common responsiveness",
		"scope": "javascript, typescript, javascriptreact, typescriptreact, css",
		"body": [
			"@media only screen and (min-width: 40rem) {",
			"    /**/",
			"}",
			"@media only screen and (min-width: 60rem) {",
			"    /**/",
			"}",
			"@media only screen and (min-width: 80rem) {",
			"    /**/",
			"}"
		]
	}
}